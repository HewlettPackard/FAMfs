1. Prepare and run 'configure':

# debug
use -q ic-11.1.046 
./prepare
./configure \
  --prefix=`pwd`/install \
  CFLAGS="-g -O0"

# optimized
use -q ic-11.1.046 
./prepare
./configure \
  --prefix=`pwd`/install \
  CFLAGS="-O3"

  --disable-ld-preload

    If you do not want to generate the .so library used for LD_PRELOAD.

  --with-numa=$PATH_TO_NUMA

    Needed to enable NUMA-aware memory allocation on Linux machines
    (set NUMA policy at runtime with UNIFYCR_NUMA_POLICY = local | interleaved,
     set NUMA node explicitly with UNIFYCR_USE_NUMA_BANK = <node no.> )



2. Build library

make clean
make
make install

3. Run "./install/bin/unifycr-config --pre-ld-flags"
   and "./install/bin/unifycr-config --post-ld-flags"

	Copy the output of each of these commands to a separate variable,'
	say $(PRE_UNIFYCR_FLAGS) and $(POST_UNIFYCR_FLAGS)

4. Compile the test program

	If you're compiling test_ramdisk.c for instance, you would do
	something like this in your makefile:
	
setenv PRE_UNIFYCR_FLAGS `./install/bin/unifycr-config --pre-ld-flags`
setenv POST_UNIFYCR_FLAGS `./install/bin/unifycr-config --post-ld-flags`
mpicc $PRE_UNIFYCR_FLAGS -g -O0 -o test_ramdisk test_ramdisk.c $POST_UNIFYCR_FLAGS

	If you are running test_interpose, you can do something similar in
	tests/Makefile.

6. If you don't want to statically build, but just preload instead, preload this shared object:

	LD_PRELOAD=$INSTALL_PATH/lib/libunifycr.so ./test_interpose

7. Use the "ipcs" command to list the currently opened shm segments.  Use
   "ipcrm -M key" to delete it after a run, or use the "ipc_cleanup" script
   in the base folder to delete all shm segements belonging to you on a node.
